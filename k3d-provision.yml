---
- hosts: all
  gather_facts: yes
  become: yes
  vars:
   ansible_host_key_checking: false
   ansible_ssh_timeout: 300
  tasks:
  - name: papermill master
    delegate_to: localhost
    async: 9999
    poll: 0
    shell:
     cmd: "papermill /share/public-git-repos/automation-tools/libvirt-provision.ipynb /tmp/mast-prov -p hostname MasterNode -p domainname kube -p url http://10.42.0.1:8000/isos/noble-server-cloudimg-amd64.img -p os_variant ubuntu-stable-latest -p size 40G -p ram 1024"
    register: masterstatus
  - name: papermill worker 1
    delegate_to: localhost
    async: 9999
    poll: 0
    register: work1status
    shell:
     cmd: "papermill /share/public-git-repos/automation-tools/libvirt-provision.ipynb /tmp/node1-prov -p hostname WorkNode -p domainname kube -p url http://10.42.0.1:8000/isos/noble-server-cloudimg-amd64.img -p os_variant ubuntu-stable-latest -p size 40G -p ram 1024"
  - name: papermill worker 2
    delegate_to: localhost
    async: 9999
    poll: 0
    register: work2status
    shell:
     cmd: "papermill /share/public-git-repos/automation-tools/libvirt-provision.ipynb /tmp/node2-prov -p hostname WorkNode2 -p domainname kube -p url http://10.42.0.1:8000/isos/noble-server-cloudimg-amd64.img -p os_variant ubuntu-stable-latest -p size 40G -p ram 1024"
  - name: wait for master task
    ansible.builtin.async_status:
     jid: "{{ masterstatus.ansible_job_id }}"
    until: job_result.finished
    register: job_result
    retries: 300
    delay: 300
  - name: wait for node1 task
    ansible.builtin.async_status:
     jid: "{{ work1status.ansible_job_id }}"
    until: job_result.finished
    register: job_result
    retries: 300
    delay: 300
  - name: wait for node2 task
    ansible.builtin.async_status:
     jid: "{{ work2status.ansible_job_id }}"
    until: job_result.finished
    register: job_result
    retries: 300
    delay: 300
  - name: develope new inventory
    delegate_to: localhost
    shell:
     cmd: |
      for i in `ls /tmp/*-prov`; do cat $i |jq '.cells[]|.outputs'|grep -i 'IP Address:' |grep -owE '[0-9.]{7,20}'; done
    register: vmIPlist
  - name: Print ips list
    ansible.builtin.debug:
     msg: "{{ item }}"
    loop: "{{ vmIPlist.stdout.split('\n') }}"
  - name: add hosts to inventory
    ansible.builtin.add_host:
     hostname: '{{ item }}'
     ansible_ssh_host: '{{ item }}'
    loop: "{{ vmIPlist.stdout.split('\n') }}"
  - name: Wait for cloud init to finish
    delegate_to: "{{ item }}"
    loop: "{{ vmIPlist.stdout.split('\n') }}"
    community.general.cloud_init_data_facts:
     filter: status
    register: res
    until: "res.cloud_init_data_facts.status.v1.stage is defined and not res.cloud_init_data_facts.status.v1.stage"
    retries: 100
    delay: 300
  - name: Refresh inventory to ensure new instances exist in inventory
    meta: refresh_inventory
  - name: Gather facts
    ansible.builtin.setup:
    delegate_to: "{{ item }}"
    delegate_facts: true
    loop: "{{ vmIPlist.stdout.split('\n') }}"
    ignore_errors: true
  - name: Install packages
    delegate_to: "{{ item }}"
    loop: "{{ vmIPlist.stdout.split('\n') }}"
    ansible.builtin.apt:
     lock_timeout: 300
     update_cache: yes
     state: latest
     pkg:
      - ncat
      - nmap
      - wget
      - podman
      - qemu-system
      - qemu-system-x86
      - qemu-system-arm
      - qemu-kvm 
      - libvirt-daemon-system
  - name: upgrade packages
    delegate_to: "{{ item }}"
    loop: "{{ vmIPlist.stdout.split('\n') }}"
    ansible.builtin.apt:
     upgrade: yes
     lock_timeout: 300
     update_cache: yes
  - name: Download k3s installer
    delegate_to: "{{ item }}"
    loop: "{{ vmIPlist.stdout.split('\n') }}"
    ansible.builtin.get_url:
     url: "https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh"
     dest: "/tmp/installk3.sh"
  - name: Run k3 installer
    delegate_to: "{{ item }}"
    loop: "{{ vmIPlist.stdout.split('\n') }}"
    ansible.builtin.command: "/bin/bash /tmp/installk3.sh"
    when: "'Node' in ansible_nodename"
  - name: regular setup
    delegate_to: "{{ item }}"
    loop: "{{ vmIPlist.stdout.split('\n') }}"
    blockinfile:
     dest: setup.sh
     block: |
      pipenv run pip install git+git://github.com/jupyterlab/jupyterlab.git#egg=jupyterlab
      snap install kubectl --classic
      sudo systemctl enable --now podman.socket
      mkdir -p /etc/containers/containers.conf.d
      echo 'service_timeout=0' > /etc/containers/containers.conf.d/timeout.conf
      sudo ln -s /run/podman/podman.sock /var/run/docker.sock
      echo "alias docker='podman'" >> /root/.bashrc
      echo "alias docker='podman'" >> /home/ansible/.bashrc
    when: "'Node' in {{ ansible_nodename }}"
  - name: register token
    set_fact:
        kubetoken: "{{ lookup('password', '/dev/null chars=ascii_letters,digit length=21', seed=inventory_hostname) }}"
  - name: register ip
    set_fact:
        masternodeip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    when: "'Master' in ansible_nodename and 'Node' in ansible_nodename"
  - name: k3 master
    delegate_to: "{{ item }}"
    loop: "{{ vmIPlist.stdout.split('\n') }}"
    blockinfile:
     dest: k3setup.sh
     block: |
      k3d cluster create multiserver --servers 3  --token {{ kubetoken }} --api-port 6443
      k3d node create newserver --cluster multiserver --role server
    when: "'Master' in {{ ansible_nodename }} and 'Node' in {{ ansible_nodename }}"
  - name: k3 worker
    delegate_to: "{{ item }}"
    loop: "{{ vmIPlist.stdout.split('\n') }}"
    blockinfile:
     dest: k3setup.sh
     block: |
      k3d node create newserver --cluster multiserver --role agent --env K3S_URL=https://{{ masternodeip }}:6443 --token {{ kubetoken }}
    when: "'Master' not in {{ ansible_nodename }} and 'Node' in {{ ansible_nodename }}"
  - name: Run setup
    delegate_to: "{{ item }}"
    loop: "{{ vmIPlist.stdout.split('\n') }}"
    ansible.builtin.command: "/bin/bash setup.sh"
  - name: Run k3 setup
    delegate_to: "{{ item }}"
    loop: "{{ vmIPlist.stdout.split('\n') }}"
    ansible.builtin.command: "/bin/bash k3setup.sh"
